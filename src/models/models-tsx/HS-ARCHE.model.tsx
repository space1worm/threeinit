/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 /Users/nzurashv/Desktop/work/tracercentral/resources/geo/HS-ARCHE.glb --transform --t
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    _000001E91E435060_IndexedFaceSet004: THREE.Mesh;
    _000001E91E435060_IndexedFaceSet004_1: THREE.Mesh;
    _000001E91E83D470_IndexedFaceSet: THREE.Mesh;
    _000001E91E8429C0_IndexedFaceSet: THREE.Mesh;
    _000001E91E845CF0_IndexedFaceSet: THREE.Mesh;
  };
  materials: {
    ["_000001E91E435060.004"]: THREE.MeshStandardMaterial;
    ["_000001E91E83D470.004"]: THREE.MeshStandardMaterial;
    ["_000001E91E8429C0.004"]: THREE.MeshStandardMaterial;
    ["_000001E91E845CF0.004"]: THREE.MeshStandardMaterial;
  };
};

export function Model(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("/HS-ARCHE-transformed.glb") as GLTFResult;
  return (
    <group {...props} dispose={null}>
      <mesh geometry={nodes._000001E91E83D470_IndexedFaceSet.geometry} material={materials["_000001E91E83D470.004"]} />
      <mesh geometry={nodes._000001E91E8429C0_IndexedFaceSet.geometry} material={materials["_000001E91E8429C0.004"]} />
      <mesh geometry={nodes._000001E91E845CF0_IndexedFaceSet.geometry} material={materials["_000001E91E845CF0.004"]} />
      <mesh
        geometry={nodes._000001E91E435060_IndexedFaceSet004.geometry}
        material={materials["_000001E91E435060.004"]}
      />
      <mesh
        geometry={nodes._000001E91E435060_IndexedFaceSet004_1.geometry}
        material={nodes._000001E91E435060_IndexedFaceSet004_1.material}
      />
    </group>
  );
}

useGLTF.preload("/HS-ARCHE-transformed.glb");
