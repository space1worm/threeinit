/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 /Users/nzurashv/Desktop/work/tracercentral/resources/geo/MSPatchPannel.glb --transform --t
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    _0000018FDDA8A810_IndexedFaceSet: THREE.Mesh;
    _0000018FDDA8FC10_IndexedFaceSet: THREE.Mesh;
    _0000018FDDA8FD60_IndexedFaceSet: THREE.Mesh;
  };
  materials: {
    _0000018FDDA8A810: THREE.MeshStandardMaterial;
    _0000018FDDA8FC10: THREE.MeshStandardMaterial;
    _0000018FDDA8FD60: THREE.MeshStandardMaterial;
  };
};

export function Model(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("/MSPatchPannel-transformed.glb") as GLTFResult;
  return (
    <group {...props} dispose={null}>
      <mesh geometry={nodes._0000018FDDA8A810_IndexedFaceSet.geometry} material={materials._0000018FDDA8A810} />
      <mesh
        geometry={nodes._0000018FDDA8FC10_IndexedFaceSet.geometry}
        material={materials._0000018FDDA8FC10}
        rotation={[-Math.PI, 0, -Math.PI]}
      />
      <mesh
        geometry={nodes._0000018FDDA8FD60_IndexedFaceSet.geometry}
        material={materials._0000018FDDA8FD60}
        rotation={[-Math.PI, 0, -Math.PI]}
      />
    </group>
  );
}

useGLTF.preload("/MSPatchPannel-transformed.glb");
