/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 /Users/nzurashv/Desktop/work/tracercentral/resources/geo/HO-Side-C-Platforms-cut2.glb --transform --t
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    _00000195A18EE240_IndexedFaceSet: THREE.Mesh;
    _00000195A18EEE10_IndexedFaceSet: THREE.Mesh;
    _00000195A1903CC0_IndexedFaceSet: THREE.Mesh;
    _00000195A190CFC0_IndexedFaceSet: THREE.Mesh;
  };
  materials: {
    _00000195A18EE240: THREE.MeshStandardMaterial;
    _00000195A18EEE10: THREE.MeshStandardMaterial;
    _00000195A1903CC0: THREE.MeshStandardMaterial;
    _00000195A190CFC0: THREE.MeshStandardMaterial;
  };
};

export function Model(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("/HO-Side-C-Platforms-cut2-transformed.glb") as GLTFResult;
  return (
    <group {...props} dispose={null}>
      <mesh geometry={nodes._00000195A18EE240_IndexedFaceSet.geometry} material={materials._00000195A18EE240} />
      <mesh geometry={nodes._00000195A18EEE10_IndexedFaceSet.geometry} material={materials._00000195A18EEE10} />
      <mesh geometry={nodes._00000195A1903CC0_IndexedFaceSet.geometry} material={materials._00000195A1903CC0} />
      <mesh geometry={nodes._00000195A190CFC0_IndexedFaceSet.geometry} material={materials._00000195A190CFC0} />
    </group>
  );
}

useGLTF.preload("/HO-Side-C-Platforms-cut2-transformed.glb");
