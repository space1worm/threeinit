/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 /Users/nzurashv/Desktop/work/tracercentral/resources/geo/Cavern-HS-Assembly-cut1.glb --transform --t
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    _000001E90203F190001: THREE.Mesh;
    _000001E90203F190001_1: THREE.Mesh;
    _000001E90203F190001_2: THREE.Mesh;
    _000001E90203F190001_3: THREE.Mesh;
  };
  materials: {
    ["Material__000001E90203F190.001"]: THREE.MeshStandardMaterial;
  };
};

export function Model(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("/Cavern-HS-Assembly-cut1-transformed.glb") as GLTFResult;
  return (
    <group {...props} dispose={null}>
      <group rotation={[Math.PI / 2, 0, 0]}>
        <mesh geometry={nodes._000001E90203F190001.geometry} material={materials["Material__000001E90203F190.001"]} />
        <mesh geometry={nodes._000001E90203F190001_1.geometry} material={materials["Material__000001E90203F190.001"]} />
        <mesh geometry={nodes._000001E90203F190001_2.geometry} material={materials["Material__000001E90203F190.001"]} />
        <mesh geometry={nodes._000001E90203F190001_3.geometry} material={materials["Material__000001E90203F190.001"]} />
      </group>
    </group>
  );
}

useGLTF.preload("/Cavern-HS-Assembly-cut1-transformed.glb");
