/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 /Users/nzurashv/Desktop/work/tracercentral/resources/geo/VR-Muon.glb --transform --t
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    ["S_Mesh_0-121"]: THREE.Mesh;
    ["S_Mesh_0-122"]: THREE.Mesh;
    ["S_Mesh_0-123"]: THREE.Mesh;
    ["S_Mesh_0-129"]: THREE.Mesh;
    ["S_Mesh_0-135"]: THREE.Mesh;
    ["S_Mesh_0-137"]: THREE.Mesh;
    ["S_Mesh_1-126"]: THREE.Mesh;
    ["S_Mesh_1-128"]: THREE.Mesh;
    ["S_Mesh_2-065"]: THREE.Mesh;
    ["S_Mesh_3-038"]: THREE.Mesh;
  };
  materials: {
    ["Material_Mesh_0-121"]: THREE.MeshStandardMaterial;
    ["Material_Mesh_0-122"]: THREE.MeshStandardMaterial;
    ["Material_Mesh_0-123"]: THREE.MeshStandardMaterial;
    ["Material_Mesh_0-129"]: THREE.MeshStandardMaterial;
    ["Material_Mesh_0-135"]: THREE.MeshStandardMaterial;
    ["Material_Mesh_0-137"]: THREE.MeshStandardMaterial;
    ["Material_Mesh_1-126"]: THREE.MeshStandardMaterial;
    ["Material_Mesh_1-128"]: THREE.MeshStandardMaterial;
    ["Material_Mesh_2-065"]: THREE.MeshStandardMaterial;
    ["Material_Mesh_3-038"]: THREE.MeshStandardMaterial;
  };
};

/**
 *
 * @param props
 */
export function Model(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("/VR-Muon-transformed.glb") as GLTFResult;
  return (
    <group {...props} dispose={null}>
      <mesh
        geometry={nodes["S_Mesh_0-121"].geometry}
        material={materials["Material_Mesh_0-121"]}
        rotation={[Math.PI / 2, 0, 0]}
      />
      <mesh
        geometry={nodes["S_Mesh_0-122"].geometry}
        material={materials["Material_Mesh_0-122"]}
        rotation={[Math.PI / 2, 0, 0]}
      />
      <mesh
        geometry={nodes["S_Mesh_0-123"].geometry}
        material={materials["Material_Mesh_0-123"]}
        rotation={[Math.PI / 2, 0, 0]}
      />
      <mesh
        geometry={nodes["S_Mesh_0-129"].geometry}
        material={materials["Material_Mesh_0-129"]}
        rotation={[Math.PI / 2, 0, 0]}
      />
      <mesh
        geometry={nodes["S_Mesh_0-135"].geometry}
        material={materials["Material_Mesh_0-135"]}
        rotation={[Math.PI / 2, 0, 0]}
      />
      <mesh
        geometry={nodes["S_Mesh_0-137"].geometry}
        material={materials["Material_Mesh_0-137"]}
        rotation={[Math.PI / 2, 0, 0]}
      />
      <mesh
        geometry={nodes["S_Mesh_1-126"].geometry}
        material={materials["Material_Mesh_1-126"]}
        rotation={[Math.PI / 2, 0, 0]}
      />
      <mesh
        geometry={nodes["S_Mesh_1-128"].geometry}
        material={materials["Material_Mesh_1-128"]}
        rotation={[Math.PI / 2, 0, 0]}
      />
      <mesh
        geometry={nodes["S_Mesh_2-065"].geometry}
        material={materials["Material_Mesh_2-065"]}
        rotation={[Math.PI / 2, 0, 0]}
      />
      <mesh
        geometry={nodes["S_Mesh_3-038"].geometry}
        material={materials["Material_Mesh_3-038"]}
        rotation={[Math.PI / 2, 0, 0]}
      />
    </group>
  );
}

useGLTF.preload("/VR-Muon-transformed.glb");
